AWSTemplateFormatVersion: 2010-09-09
Description: VPC with an Amazon Linux LAMP instance in a public subnet

Parameters:

  KeyName:
    Type: String
    Description: the keypair that Vocareum will use to launch EC2 instances
    Default: default-lab-key

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  LabUserId:
    Default: arn:aws:sts::012345678:assumed-role/vocareum-role/username
    Description: "session user ARN"
    Type: String

  QuestionTableRead:
    Description: Read capacity units for DynamoDB table
    Type: String
    MinLength: '1'
    MaxLength: '12'
    AllowedPattern: '[0-9]*'
    Default: '1'

  QuestionTableWrite:
    Description: Write capacity units for DynamoDB table
    Type: String
    MinLength: '1'
    MaxLength: '6'
    AllowedPattern: '[0-9]*'
    Default: '1'

Conditions:
  InUsEast1: !Equals
    - !Ref 'AWS::Region'
    - us-east-1

Resources:

###########
# VPC with Internet Gateway
###########

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab IGW

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - VPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

###########
# Public Route Table
###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - VPCtoIGWConnection
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

###########
# Private Route Table
###########

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table

###########
# Public Subnet
###########

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet


###########
# Cloud9 instance
###########

  # Cloud9:
  #   Type: "AWS::Cloud9::EnvironmentEC2"
  #   Properties:
  #     InstanceType: t2.micro
  #     SubnetId: !Ref PublicSubnet
  #     OwnerArn: !Ref LabUserId
  #     Name: CafeWebServer


###########
# IAM Role for App
###########

  CafeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref CafeRole]
      InstanceProfileName: !Ref CafeRole

  CafeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CafeRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:*
                Resource: 'arn:aws:ssm:*:*:parameter/*'
        - PolicyName: importkey
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ec2:ImportKeyPair
                Resource: '*'

###########
# Lambda function that creates VPC in second AWS Region
###########

  secondaryLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: triggers Cloudformation to create stack in second region.
      Code:
        ZipFile: !Sub |
          import boto3, os, time, random
          import json
          import cfnresponse

          def lambda_handler(event, context):

            #Get the region
            if '${AWS::Region}' == 'us-east-1':
              region='us-west-2'
            else:
              region='us-east-1'

            # Invoke cloudformation in the secondary region
            cf_client = boto3.client('cloudformation', region_name=region)

            cf_client.create_stack(
              StackName='${AWS::StackName}sec',
              TemplateURL='https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-200-ACACAD-20-EN/mod4-challenge/region-two-network.template',
              Capabilities=['CAPABILITY_NAMED_IAM']
            )

            #responseData = {'Message': 'Hello {}!'.format(event['ResourceProperties']['Name'])}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {"test_response_1": "It worked"})
            #curlCMD = "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"SUCCESS\",\"Reason\" : \"Configuration Complete\",\"PhysicalResourceId\" : \"secondaryLambda\",\"StackId\" : \"" + event["StackId"] + "\",\"RequestId\" : \"" + event["RequestId"] + "\",\"LogicalResourceId\" : \"" + event["LogicalResourceId"] + "\",\"UniqueId\" : \"secondaryLambda1\"}' \"" + event["ResponseURL"] + "\""
            #print(curlCMD)
            #try:
            #  os.system(curlCMD)
            #except Exception as e:
            #  print(('Error: ' + str(e)))

      Handler: index.lambda_handler
      Role: !GetAtt 'SecLambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 300

  SecLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonVPCFullAccess'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: customLambdaPol
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:CreateUploadBucket
                  - cloudformation:DeleteStack
                  - cloudformation:SignalResource
                  - cloudformation:TagResource
                  - cloudformation:UntagResource
                  - cloudformation:UpdateStack
                  - cloudformation:ValidateTemplate
                  - ec2:AllocateAddress
                  - ec2:AssignIpv6Addresses
                  - ec2:AssignPrivateIpAddresses
                  - ec2:AssociateAddress
                  - ec2:AssociateDhcpOptions
                  - ec2:AssociateIamInstanceProfile
                  - ec2:AssociateRouteTable
                  - ec2:AssociateSubnetCidrBlock
                  - ec2:AssociateVpcCidrBlock
                  - ec2:AttachInternetGateway
                  - ec2:AttachNetworkInterface
                  - ec2:AttachVolume
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateInternetGateway
                  - ec2:CreateRoute
                  - ec2:CreateRouteTable
                  - ec2:CreateSecurityGroup
                  - ec2:CreateSubnet
                  - ec2:CreateTags
                  - ec2:CreateVolume
                  - ec2:Modify*
                  - ec2:CreateVpc
                  - ec2:CreateLocalGatewayRoute*
                  - ec2:RevokeSecurityGroup*
                  - ec2:Describe*
                  - ec2:Get*
                  - ec2:Delete*
                  - ec2:UpdateSecurityGroupRule*
                  - ec2:RunInstances
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - lambda:*
                  - logs:PutLogEvents
                  - ssm:GetParameters
                  - iam:List*
                  - iam:PutRolePolicy
                  - iam:Get*
                  - iam:PassRole
                  - iam:CreateInstanceProfile
                  - iam:AttachRolePolicy
                  - iam:AttachGroupPolicy
                  - iam:AddUserToGroup
                  - iam:AddRoleToInstanceProfile
                  - sns:*
                  - ssm:*
                Resource: "*"

  #Custom Resource to trigger lambda function.
  invokeLambda:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt secondaryLambda.Arn

############
# Multiple Choice-related RESOURCES
############

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "qnum"
          AttributeType: S
      KeySchema:
        - AttributeName: "qnum"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref 'QuestionTableRead'
        WriteCapacityUnits: !Ref 'QuestionTableWrite'
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: answers

  RecordAnswersLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          console.log('Loading event');
          var AWS = require('aws-sdk');
          var dynamodb = new AWS.DynamoDB();
          const querystring = require('querystring');
          exports.handler = function(event, context, callback) {
              console.log("Request received:\n", JSON.stringify(event));
              console.log("Context received:\n", JSON.stringify(context));
              const params = querystring.parse(event.body);
              var tableName = "answers";
              var datetime = new Date().getTime().toString();
              var qnum= params.qnum;
              var answer = params.answer;
              dynamodb.putItem({
                      "TableName": tableName,
                      "Item": {
                          "qnum": {
                              "S": qnum
                          },
                          "answer": {
                              "S": answer
                          }
                      }
                  }, function(err, data) {
                      if (err) {
                          context.fail('ERROR: Dynamo failed: ' + err);
                      } else {
                          console.log('Dynamo Success: ' + JSON.stringify(data, null, '  '));
                          context.succeed('Answer submitted successfully. Click the browser back button to submit an answer to another question.');
                      }
                  });
              // Generate HTML.
              const html = '<html><p>Answer to question ' + qnum + ' submitted successfully.</p><p>Use the browser back button to return to the question list to submit an answer to any other question.</p></html>';

              // // Return HTML as the result.
              callback(null, html);
          }
      FunctionName: RecordAnswers
      Handler: index.handler
      Role: !GetAtt 'RecordAnswersLambdaRole.Arn'
      Runtime: nodejs16.x
      Timeout: 300

  RecordAnswersLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RecordAnswers
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  DynamoDBFullRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RecordAnswersFullDynamo
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:*
              - logs:*
              - apigateway:*
            Resource:
              - '*'
      Roles:
        - !Ref RecordAnswersLambdaRole

############
# API Gateway resources
############

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    DependsOn:
      - RecordAnswersLambdaFunction
      - ApiGatewayLambdaInvokeRole
    Properties:
      Name: RecordAnswersApi
      Description: "API Gateway collects student answers"
      Body:
        swagger: "2.0"
        info:
          version: "2020-07-10T17:39:23Z"
          title: "RecordAnswersApi"
        host: "${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
        basePath: "/RecordAnswers"
        schemes:
        - "https"
        paths:
          /:
            post:
              consumes:
              - "application/x-www-form-urlencoded"
              produces:
              - "text/html"
              responses:
                "200":
                  headers:
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:${AWS::AccountId}:function:RecordAnswers/invocations
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      text/html: "$input.path('$')"
                requestTemplates:
                  application/x-www-form-urlencoded: "{\"body\": \"$input.body\"}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"


  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: RecordAnswers

############
# API Gateway permission to invoke Lambda
############

  PermissionForApiGatewayToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: RecordAnswers
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/"

  ApiGatewayLambdaInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: apiInvokeLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - logs:*
                Resource: "*"

############
# Hosting of the questions.html file
############

  htmlBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
       IndexDocument: questions.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - HEAD
              - POST
              - DELETE
            AllowedOrigins:
              - '*'

  tweekHtmlFileLambda:
    Type: 'AWS::Lambda::Function'
    DependsOn: ApiGateway
    Properties:
      Description: updates the questions.html file with correct API endpoint.
      Code:
        ZipFile: !Sub |
          import boto3, os, sys, subprocess, time, random, urllib3, urllib.request
          def lambda_handler(event, context):
            # TO DO: set the urlRoot to the dir in S3 large objects that hosts the questions HTML files in each language.
            # Be sure to keep the trailing backslash.
            urlRoot = "http://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-200-ACACAD-20-EN/mod4-challenge/"

            #NOTE: DO NOT MODIFY ANY CODE BELOW THIS LINE unless you need to add support for a language not already listed here
            pages = ['questions.html', 'questions-es.html', 'questions-ja.html', 'questions-ko.html', 'questions-pt.html', 'questions-zh.html']
            pagesDict = {"questions.html": "", "questions-es.html": "", "questions-ja.html": "", "questions-ko.html": "", "questions-pt.html": "", "questions-zh.html": ""}

            #Check which languages the questions have been translated into
            for item in pages:
              url = urlRoot + item
              print(url)
              http = urllib3.PoolManager()
              r = http.request('GET', url)
              if (r.status == 200 ):
                pagesDict[item] = 'y'
              else:
                pagesDict[item] = 'n'
            for item in pagesDict.items():
              print(item)

            #copy each page to S3, only setting hyperlinks in each localized page for langs that are available
            for key, value in pagesDict.items():
              if (value == 'y'):
                url = urlRoot + key
                print("Processing " + url + " page.")
                response = urllib.request.urlopen(url)
                data = response.read()
                text = data.decode('utf-8')
                # Find/replace the REPLACE substrings with the apiEndpoint variable
                endPoint = os.environ['apiEndpoint']
                text = text.replace('REPLACE', str(endPoint))

                if (pagesDict['questions-es.html'] == 'y'):
                  text = text.replace('REPL-ES', str('| <a href="questions-es.html">Spanish</a>'))
                else:
                  text = text.replace('REPL-ES', str(''))

                if (pagesDict['questions-ja.html'] == 'y'):
                  text = text.replace('REPL-JA', str('| <a href="questions-ja.html">Japanese</a>'))
                else:
                  text = text.replace('REPL-JA', str(''))

                if (pagesDict['questions-ko.html'] == 'y'):
                  text = text.replace('REPL-KO', str('| <a href="questions-ko.html">Korean</a>'))
                else:
                  text = text.replace('REPL-KO', str(''))

                if (pagesDict['questions-pt.html'] == 'y'):
                  text = text.replace('REPL-PT', str('| <a href="questions-pt.html">Portuguese</a>'))
                else:
                  text = text.replace('REPL-PT', str(''))

                if (pagesDict['questions-zh.html'] == 'y'):
                  text = text.replace('REPL-ZH', str('| <a href="questions-zh.html">Chinese</a>'))
                else:
                  text = text.replace('REPL-ZH', str(''))

                bucketName = os.environ['writeToBucketName']
                # Write the resulting string as a file to the S3 bucket in this account
                s3 = boto3.resource('s3')
                print("Writing " + key + " file to s3")
                result = s3.Object(bucketName, key).put(Body=text, ACL='public-read', ContentType='text/html')
                print(result)
      Environment:
        Variables:
          writeToBucketName : !Ref htmlBucket
          apiEndpoint: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/RecordAnswers
      Handler: index.lambda_handler
      Role: !GetAtt 'QuestionsSecLambdaExecutionRole.Arn'
      Runtime: python3.9
      Timeout: 300

  QuestionsSecLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: customLambdaPol
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - logs:*
                Resource: "*"

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: ScheduledRule
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt 'tweekHtmlFileLambda.Arn'
          Id: TargetFunctionV1

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref tweekHtmlFileLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledRule.Arn

############
# Outputs
############

Outputs:
  URL:
    Description: Load this URL to access and answer questions that appear in this lab.
    Value: !Sub
      - <a href="http://${URL}.s3-website.${AWS::Region}.amazonaws.com/" target="_blank">Access the multiple choice questions</a>
      - { URL: !Ref htmlBucket}
